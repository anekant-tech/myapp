{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","about","onClick","toggleMode","role","htmlFor","TextForm","useState","Text","setText","style","color","value","onChange","event","target","backgroundColor","pointerColor","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","length","About","MyStyle","setMyStyle","btnText","setBtnText","class","Alert","height","alert","word","lower","charAt","slice","capatilize","msg","propType","PropTypes","string","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b8fea04.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n          <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n          </li>\r\n          \r\n        </ul>\r\n        {/*<form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n    </form> */}\r\n    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\"  htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n</div>\r\n      </div>\r\n    </div>\r\n  </nav> \r\n            \r\n        \r\n    )\r\n}\r\nNavbar.propType={title:PropTypes.string,\r\nabout:PropTypes.string}\r\nNavbar.defaultProps={\r\n    title:'set title here',\r\n    about:'about company'\r\n    }","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClicked=()=>{\r\n        let newText=Text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Text  has been converted to uppercase\",\"success\")\r\n    }\r\n    const handleLowerClicked=()=>{\r\n        let newText=Text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Text  has been converted to lowercase\",\"success\")\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy=()=>{\r\n       \r\n        navigator.clipboard.writeText(Text)\r\n        props.showAlert(\"Text  has been copied\",\"success\")\r\n    }\r\n    const clearTextClicked=()=>{\r\n        let newText=''\r\n        setText(newText)\r\n        props.showAlert(\"Text  has been cleared\",\"success\")\r\n    }\r\n    const handleExtraSpace=()=>{\r\n        let newText=Text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra space has been removed has been copied\",\"success\")\r\n    }\r\n    \r\n     \r\n    const [Text, setText] = useState('enter the text here');\r\n\r\n    return (<>\r\n       \r\n        <div className=\"container\"style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.title}</h1>\r\n            \r\n<div className='container mb-3'>\r\n  \r\n  <textarea className=\"form-control\" value ={Text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black',pointerColor:'red'}} id=\"myBox\" rows=\"8\"></textarea>\r\n  </div>\r\n  <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClicked}>To upperCase</button>\r\n  <button className=\"btn btn-primary mx-1 my-1\" onClick={handleLowerClicked}>LowerCase</button>\r\n  <button className=\"btn btn-primary mx-1 my-1\" onClick={clearTextClicked}>Clear</button>\r\n  <button className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>copy</button>\r\n  <button className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpace}>RemoveExtraSpace</button>\r\n        </div>\r\n\r\n<div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}} >\r\n    <h1>Your text summary</h1>\r\n    <p>{Text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {Text.length} letters</p>\r\n    <h2>preview</h2>\r\n\r\n    <p>{Text.length>0?Text:'Enter the text in above block to preview'}</p></div></>\r\n    )\r\n}\r\n","import React,{useState}  from 'react'\r\n\r\nexport default function About() {\r\n    const [MyStyle, setMyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    })\r\n    const [btnText, setBtnText]=useState(\"Enable dark mode\")\r\n    const toggleMode =()=>{\r\n        if(MyStyle.color==='black'){\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n                \r\n            })\r\n            setBtnText(\"Enable light mode\")\r\n        }\r\n            else{\r\n                setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n\r\n            })\r\n            setBtnText(\"Enable dark mode\")\r\n        }\r\n    }\r\n    return (<>\r\n        <div className=\"container\" style={MyStyle}>\r\n            <h1>About us</h1>\r\n            <div className=\"accordion\" style={MyStyle} id=\"accordionExample\">\r\n              <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" style={MyStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    Accordion Item #1\r\n                </button>\r\n                </h2>\r\n                 <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                 <div className=\"accordion-body\" style={MyStyle}>\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                 </div>\r\n                 </div>\r\n              </div>\r\n            <div className=\"accordion-item\" >\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" style={MyStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={MyStyle}>\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" >\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" style={MyStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={MyStyle}>\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n            <div className=\"container my-3\">\r\n            <button type=\"button\" onClick={toggleMode} class=\"btn btn-primary\" >{btnText}</button>\r\n                        \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capatilize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (<div style={{height:'50px'}}>\r\n        \r\n          { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capatilize(props.alert.type)}</strong>:{props.alert.msg}\r\n  \r\n                          </div>}\r\n            </div>\r\n            \r\n        \r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport{\n  BrowserRouter as Router,\n  Routes,\n  Route,\n\n} from \"react-router-dom\";\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [mode,setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  const showAlert=(message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1500);\n\n    \n\n  }\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor='#223242'\n      showAlert(\"Dark mode has been enable\",\"success\")\n    }\n    else{\n     setMode('light')\n     document.body.style.backgroundColor='white'\n     showAlert(\"light mode has been enable\",\"success\")  \n    }\n  }\n    return ( <>\n  <Router>\n    \n  <Navbar title=\"Anekant\" mode={mode} toggleMode={toggleMode}\n  about=\"about us\"/>\n  <Alert alert={alert}/>\n  <div className=\"container my-3\">\n   <Routes>\n         <Route path='/About' element={<About/>} /> \n         <Route path='/' element={<TextForm title=\"Enter the text here\" mode={mode} showAlert={showAlert}/>} />       \n         \n    </Routes>\n  </div>\n  </Router>\n\n  </>);\n\n    }\n   \n\n    export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}